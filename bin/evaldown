#!/usr/bin/env node

const yargs = require("yargs");

const cli = require("../lib/cli");
const errors = require("../lib/errors");
const options = require("../lib/options");

function exitWithError(err) {
  if (err.customOutput) {
    console.error(err.customOutput);
  } else {
    console.error(errors.errorToInfo(err));
  }

  if (typeof err.exitCode === "number") {
    process.exit(err.exitCode);
  }

  process.exit(1);
}

const processArgv = opts =>
  yargs
    .usage("$0 [path]")
    .config(opts)
    .check(argv => {
      const hasConfig = typeof argv.config === "string";
      if (hasConfig && argv.config.length === 0) {
        throw new Error('the "config" option requires a config file path');
      }
      const hasPositional = argv._.length > 0;
      if (!(hasConfig || hasPositional)) {
        throw new Error('either "config" or a source path is required');
      }
      return true;
    })
    .option("config", {
      describe: "Path to the config file.",
      type: "string"
    })
    .option("format", {
      describe: "Format of the output content.",
      type: "string",
      choices: ["markdown", "inlined", "html"]
    })
    .option("inplace", {
      describe: 'Write to "output" blocks within source markdown only.',
      type: "boolean"
    })
    .option("update", {
      describe: 'Also update "output" blocks within the source markdown.',
      type: "boolean"
    })
    .option("target-path", {
      describe: "Location to write output files when processing a directory.",
      type: "string"
    })
    .option("tsconfig-path", {
      describe: "Path to a tsconfig.json file to use for TypeScript.",
      type: "string"
    })
    .conflicts("inplace", ["update", "format"])
    .help().argv;

const processArgsAndExecute = (cwd, argv) => {
  const { pwd, opts } = options.loadOptions(cwd, argv);
  const args = processArgv(opts);
  const cmd = args._.length > 0 ? "byPath" : "files";

  return cli[cmd](pwd || cwd, { ...opts, ...args });
};

(async () => {
  try {
    await processArgsAndExecute(process.cwd(), process.argv.slice(2));
  } catch (e) {
    exitWithError(e);
  }
})();
